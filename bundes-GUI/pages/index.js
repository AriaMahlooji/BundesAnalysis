import Head from "next/head";
import { Inter } from "next/font/google";
import Header from "@/components/Header";
import TopCards from "@/components/TopCards";
import TeamsStanding from "@/components/TeamsStanding";
import { useEffect, useState } from "react";
import MatchList from "@/components/MatchList";
import { getStandings } from "@/data_fetchers/home_page_fetchers/standing_fetcher";
import { getDefaultMatches } from "@/data_fetchers/home_page_fetchers/default_match_fetcher";
import SideContent from "@/components/SideContent";
import { usePageNumber } from "@/context APIs/PageNumberContext";
import { useSeason } from "@/context APIs/SeasonHomePageContext";
import { useTeamId } from "@/context APIs/TeamIdContext";
import { useMatch } from "@/context APIs/MatchContext";
import { useFinalStatus } from "@/context APIs/FinalStatusContext";
import CustomModal from "@/components/modal/CustomModal";
import ChosenMatchModal from "@/components/ChosenMatchModal";
import { useChosenMatch } from "@/context APIs/ChosenMatchContext";
import DetailedGoalList from "@/components/DetailedGoalList";
import { useGoal } from "@/context APIs/MatchContext copy";
import { getEvents } from "@/data_fetchers/home_page_fetchers/event_fetcher";
import { useSide } from "@/context APIs/SideContext";
import { useMatchOrGoal } from "@/context APIs/MatchOrGoalContext";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [standingData, setStandingData] = useState();
  const { seasons, setSeasons } = useSeason();
  const { teamId, setTeamId } = useTeamId();
  const { finalStatus, setFinalStatus } = useFinalStatus();
  const { chosenMatch, setChosenMatch } = useChosenMatch();
  const {goals, setGoals} = useGoal();
  const {side, setSide}= useSide();
  const {matchOrGoal, setMatchOrGoal} = useMatchOrGoal();

  useEffect(() => {
  }, [teamId]);

  useEffect(() => {
  }, [seasons]);

  useEffect(() => {
    getStandings(seasons)
      .then((response) => response.json())
      .then((data) => setStandingData(data))
      .catch((error) => console.error("Error fetching data:", error));
  }, [seasons]);

  const { matches, setMatches } = useMatch();
  const { pageNumber, setPageNumber } = usePageNumber();

  useEffect(() => {
    getDefaultMatches(teamId, pageNumber, seasons, finalStatus)
      .then((response) => response.json())
      .then((data) => setMatches(data))
      .catch((error) => console.error("Error fetching data:", error));
  }, [pageNumber, seasons, teamId, finalStatus]);

  useEffect(() => {
    getEvents(teamId, pageNumber, seasons, side, ["Goal", "Own goal", "Penalty"])
      .then((response) => response.json())
      .then((data) => setGoals(data.events))
      .catch((error) => console.error("Error fetching data:", error));
  }, [pageNumber, seasons, teamId, side]);

  const [chosenMatchModalIsOpen, setChosenMatchIsOpen] = useState(false);
  useEffect(() => {
    if (chosenMatch) {
      setChosenMatchIsOpen(true);
    } else {
      setChosenMatchIsOpen(false);
    }
  }, [chosenMatch]);

  const openModal = () => {
    setChosenMatchIsOpen(true);
  };

  const closeModal = () => {
    setChosenMatchIsOpen(false);
    setChosenMatch();
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-gray-200 min-h-screen">
        <Header title={"Home"}></Header>
        <TopCards />
        <div className="border p-4 grid md:grid-cols-3 grid-cols-1 gap-4">
          <div className="col-span-2">
            <TeamsStanding standingInfo={standingData} />
          </div>
          <SideContent title="Matches">
            {matchOrGoal ==="goal" && <DetailedGoalList goals={goals}/>}
            {matchOrGoal ==="match" && <MatchList matches={matches}></MatchList>}
          </SideContent>
        </div>
        <ChosenMatchModal
          isOpen={chosenMatchModalIsOpen}
          onClose={closeModal}
        ></ChosenMatchModal>
      </main>
    </>
  );
}

//<MatchList matches={matches}></MatchList>